#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>

// Funkcja do wczytywania macierzy z pliku
std::vector<std::vector<int>> loadMatrixFromFile(const std::string& filename) {
    std::ifstream file(filename);
    std::vector<std::vector<int>> matrix;

    if (!file.is_open()) {
        std::cerr << "Nie mozna otworzyc pliku: " << filename << std::endl;
        return matrix;
    }

    int rows, cols;
    file >> rows >> cols;  // Odczytujemy wymiary macierzy

    matrix.resize(rows, std::vector<int>(cols));
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            file >> matrix[i][j];
        }
    }
    file.close();
    return matrix;
}

// Funkcja do dodawania macierzy
std::vector<std::vector<int>> addMatrices(const std::vector<std::vector<int>>& matrixA, const std::vector<std::vector<int>>& matrixB) {
    int rows = matrixA.size();
    int cols = matrixA[0].size();
    std::vector<std::vector<int>> result(rows, std::vector<int>(cols));

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            result[i][j] = matrixA[i][j] + matrixB[i][j];
        }
    }
    return result;
}

// Funkcja do zapisywania macierzy do pliku
void saveMatrixToFile(const std::string& filename, const std::vector<std::vector<int>>& matrix) {
    std::ofstream file(filename);
    if (!file.is_open()) {
        std::cerr << "Nie mozna otworzyc pliku wynikowego: " << filename << std::endl;
        return;
    }

    int rows = matrix.size();
    int cols = matrix[0].size();
    file << rows << " " << cols << std::endl;
    for (const auto& row : matrix) {
        for (int val : row) {
            file << val << " ";
        }
        file << std::endl;
    }
    file.close();
}

int main(int argc, char* argv[]) {
    // Wyświetlenie argumentów wywołania
    std::cout << "Argumenty wywolania:" << std::endl;
    for (int i = 0; i < argc; ++i) {
        std::cout << "[" << i << "] " << argv[i] << std::endl;
    }

    // Sprawdzenie, czy podano odpowiednią liczbę argumentów
    if (argc < 4) {
        std::cerr << "Blad: Podaj trzy argumenty: plik1, plik2 oraz plik wynikowy." << std::endl;
        return 1;
    }

    // Ścieżki do plików
    std::string fileA = argv[1];
    std::string fileB = argv[2];
    std::string outputFile = argv[3];

    // Wczytanie macierzy z plików
    auto matrixA = loadMatrixFromFile(fileA);
    auto matrixB = loadMatrixFromFile(fileB);

    if (matrixA.empty() || matrixB.empty()) {
        std::cerr << "Blad: Nie mozna wczytac jednej z macierzy." << std::endl;
        return 1;
    }

    // Sprawdzamy, czy wymiary macierzy są zgodne do dodawania
    if (matrixA.size() != matrixB.size() || matrixA[0].size() != matrixB[0].size()) {
        std::cerr << "Blad: Macierze maja rozne wymiary." << std::endl;
        return 1;
    }

    // Dodajemy macierze
    auto resultMatrix = addMatrices(matrixA, matrixB);

    // Zapisujemy wynik do pliku wynikowego
    saveMatrixToFile(outputFile, resultMatrix);

    std::cout << "Operacja zakonczona pomyslnie. Wynik zapisano w " << outputFile << std::endl;
    return 0;
}
