Zadanie 1 

import turtle

def triangle(turtle, size, min):
    if size > min:
     for i in range(3):
       
      
      turtle.forward(size)
      turtle.left(60)
      triangle(turtle, size/2, min)
      turtle.right(180)
      
    
     

t = turtle.Turtle()
t.shape("turtle")
t.speed(100)
#t.goto(-100,-100)
t.left(60)
triangle(t, 80 , 11)


Zadanie 2


import turtle

def triangle(turtle, size, min):
    if size > min:
     for i in range(3):
       
      
      turtle.forward(size/4)
      turtle.left(60)
      triangle(turtle, size/2, min)
      turtle.right(60)
      turtle.forward(3*size/4)
      turtle.right(120)
      
    
     

t = turtle.Turtle()
t.shape("turtle")
t.speed(100)
#t.goto(-100,-100)
t.left(60)
triangle(t, 160 , 11)

Zadanie 3

import turtle

def triangle(turtle, size, min):
    if size > min:
      turtle.forward(size)
      turtle.left(20)
      triangle(turtle, size/1.25, min)
      turtle.right(40)
      triangle(turtle, size/1.25, min)
      turtle.left(20)
      turtle.backward(size)

    
     

t = turtle.Turtle()
t.shape("turtle")
t.speed(500)
#t.goto(-100,-100)
t.left(90)
triangle(t, 50, 5)



Na Labach

from turtle import *

left(90)

#rysuje kwadrat o boku x
def kwadrat(x):
  for i in range(4):
    forward(x)
    right(90)
    
def trojkat(x):
  for i in range(3):
    forward(x)
    right(120)
  
  
def sierpinski(x, n):
    if n == 0:
      return
    
    for i in range(3):
      sierpinski(x/2, n-1)
      forward(x)
      right(120)
  
  #wywołanie funkcji o boku 120
  
# drzewo fraktalne
# o wysokośći h i stopniu skomplikowania n
def tree(h,n):
  if n == 1:
    forward(h)
    back(h)
    return
  
  forward(h/3)
  left(30)
  tree(h/2, n-1)
  right(60)
  tree(h/2, n-1)
  left(30)
  back(h/3)
  
tree(120, 7)

speed()

